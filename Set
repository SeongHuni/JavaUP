package SetCalculation;

import java.util.Scanner;

public class Set {
    public static void main(String[] args)
    {
        try
        {
            Scanner sc = new Scanner(System.in);

            // 집합 A 입력
            System.out.print("집합 A 입력: ");
            int[] setA = inputSet(sc);

            // 집합 B 입력
            System.out.print("집합 B 입력: ");
            int[] setB = inputSet(sc);

            // 합집합 계산
            int[] union = unionSet(setA, setB);

            // 교집합 계산
            int[] intersection = intersectionSet(setA, setB);

            // 차집합 계산 (A - B)
            int[] difference = relativeComplementSet(setA, setB);

            // 결과 출력
            System.out.print("합집합: ");
            printArray(union);

            System.out.print("교집합: ");
            printArray(intersection);

            System.out.print("차집합: ");
            printArray(difference);

            System.out.println("계속하려면 아무 키나 누르십시오 . . .");
            sc.nextLine(); // 계산한 값을 출력 후 아무 키 입력시 종료
            sc.close();
        } catch (Exception e)
        {
            System.out.println("오류 발생: " + e.getMessage());
        }
    }

    // 집합 원소를 입력받는 메서드 (공백으로 구분, -1 입력 시 종료)
    private static int[] inputSet(Scanner sc)
    {
        String[] input = sc.nextLine().split(" ");
        int[] tempSet = new int[input.length];
        int size = 0;

        for (String value : input)
        {
            try
            {
                int num = Integer.parseInt(value);
                if (num == -1)
                {
                    break; // 입력 종료 조건
                }
                // 음수는 무시하고, 중복 확인 (중복이면 추가하지 않음)
                if (num >= 0 && !isInArray(tempSet, size, num))
                {
                    tempSet[size++] = num;
                }
            } catch (NumberFormatException e)
            {
                System.out.println("유효하지 않은 숫자입니다.: " + value);
                System.exit(0);
            }
        }
        // 사용자 정의 복사 메서드를 사용하여 실제 크기의 배열 반환
        int[] set = finalResult(tempSet, size);
        return set;
    }

    // 중복 확인 메서드
    private static boolean isInArray(int[] arr, int len, int value)
    {
        for (int i = 0; i < len; i++)
        {
            if (arr[i] == value)
            {
                return true;
            }
        }
        return false;
    }

    // 합집합 메서드
    private static int[] unionSet(int[] a, int[] b)
    {
        int[] temp = new int[a.length + b.length];
        int n;

        // 집합 A의 원소를 temp에 복사
        for (n = 0; n < a.length; n++)
        {
            temp[n] = a[n];
        }

        // 집합 B의 원소 각각에 대해 A에 이미 있는지 중복 확인 후 없으면 추가
        for (int i = 0; i < b.length; i++)
        {
            if (isInArray(a, a.length, b[i])) // 이미 존재하면 건너뜀
            {
                continue;
            }
            temp[n] = b[i];
            n++;
        }

        // 사용자 정의 복사 메서드를 사용하여 결과 배열 생성
        int[] result = finalResult(temp, n);
        return result;
    }

    // 교집합 메서드
    private static int[] intersectionSet(int[] a, int[] b)
    {
        int[] temp = new int[Math.min(a.length, b.length)];
        int num = 0;

        // 배열 b의 각 원소가 a에도 존재하는지 확인 (중복 없이 추가)
        for (int i = 0; i < b.length; i++)
        {
            if (isInArray(a, a.length, b[i]) && !isInArray(temp, num, b[i]))
            {
                temp[num++] = b[i];
            }
        }

        // 사용자 정의 복사 메서드를 사용하여 결과 배열 생성
        int[] result = finalResult(temp, num);
        return result;
    }

    // 차집합 메서드 (A - B)
    private static int[] relativeComplementSet(int[] a, int[] b)
    {
        int[] temp = new int[a.length];
        int n = 0;

        // 배열 a의 각 원소가 배열 b에 없는 경우에만 추가
        for (int i = 0; i < a.length; i++)
        {
            if (!isInArray(b, b.length, a[i]))
            {
                temp[n++] = a[i];
            }
        }

        // 사용자 정의 복사 메서드를 사용하여 결과 배열 생성
        int[] result = finalResult(temp, n);
        return result;
    }

    // 배열 출력 메서드 : 메서드 결과값을 원소하나씩 불러들임
    private static void printArray(int[] array)
    {
        System.out.print("< ");
        for (int i = 0; i < array.length; i++)
        {
            if (i > 0)
            {
                System.out.print(" ");
            }
            System.out.print(array[i]);
        }
        System.out.println(" >");
    }

    // 사용자 정의 배열 복사 메서드
    private static int[] finalResult(int[] tempCount, int length)
    {
        //tempCount 배열의 앞쪽 length개 요소를 새 배열로 복사
        int[] newArray = new int[length];
        for (int i = 0; i < length; i++)
        {
            newArray[i] = tempCount[i];
        }
        return newArray;
    }
}
