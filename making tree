import java.util.*;

public class Base36TreeTraversal {
    // 트리 노드 클래스 정의
    static class TreeNode {
        char value;
        TreeNode left;
        TreeNode right;
        
        public TreeNode(char value) {
            this.value = value;
            this.left = null;
            this.right = null;
        }
    }
    
    // 36진수 변환 함수
    public static String toBase36(long num) {
        if (num == 0) return "0";
        
        final String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        StringBuilder result = new StringBuilder();
        
        while (num > 0) {
            result.insert(0, digits.charAt((int)(num % 36)));
            num /= 36;
        }
        
        return result.toString();
    }
    
    // 트리 생성 함수
    public static TreeNode createTree(String base36Str) {
        if (base36Str == null || base36Str.isEmpty()) {
            return null;
        }
        
        TreeNode root = new TreeNode(base36Str.charAt(0));
        
        if (base36Str.length() > 1) {
            // 문자열을 반으로 나누어 왼쪽, 오른쪽 서브트리 생성
            int mid = (base36Str.length() - 1) / 2;
            if (mid > 0) {
                root.left = createTree(base36Str.substring(1, mid + 1));
            }
            if (base36Str.length() > mid + 1) {
                root.right = createTree(base36Str.substring(mid + 1));
            }
        }
        
        return root;
    }
    
    // 전위 순회 (Preorder)
    public static void preorder(TreeNode node, List<Character> result) {
        if (node != null) {
            result.add(node.value);
            preorder(node.left, result);
            preorder(node.right, result);
        }
    }
    
    // 중위 순회 (Inorder)
    public static void inorder(TreeNode node, List<Character> result) {
        if (node != null) {
            inorder(node.left, result);
            result.add(node.value);
            inorder(node.right, result);
        }
    }
    
    // 후위 순회 (Postorder)
    public static void postorder(TreeNode node, List<Character> result) {
        if (node != null) {
            postorder(node.left, result);
            postorder(node.right, result);
            result.add(node.value);
        }
    }
    
    // 레벨 순회 (Level Order)
    public static List<Character> levelOrder(TreeNode root) {
        List<Character> result = new ArrayList<>();
        if (root == null) return result;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            result.add(node.value);
            
            if (node.left != null) {
                queue.offer(node.left);
            }
            if (node.right != null) {
                queue.offer(node.right);
            }
        }
        
        return result;
    }
    
    // 트리 시각적 출력 함수
    public static void printTree(TreeNode root, String prefix, boolean isLeft) {
        if (root == null) return;
        
        System.out.println(prefix + (isLeft ? "├── " : "└── ") + root.value);
        
        printTree(root.left, prefix + (isLeft ? "│   " : "    "), true);
        printTree(root.right, prefix + (isLeft ? "│   " : "    "), false);
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        while (true) {
            System.out.println("\n===== 36진수 트리 순회 프로그램 =====");
            System.out.println("1. 직접 숫자 입력");
            System.out.println("2. 무작위 숫자 생성");
            System.out.println("3. 종료");
            System.out.print("선택: ");
            
            int choice;
            try {
                choice = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("유효한 숫자를 입력하세요.");
                scanner.nextLine(); // 버퍼 비우기
                continue;
            }
            
            if (choice == 3) {
                System.out.println("프로그램을 종료합니다.");
                break;
            }
            
            long number;
            if (choice == 1) {
                System.out.print("숫자 입력: ");
                try {
                    number = scanner.nextLong();
                    if (number < 0) {
                        System.out.println("양수를 입력하세요.");
                        continue;
                    }
                } catch (InputMismatchException e) {
                    System.out.println("유효한 숫자를 입력하세요.");
                    scanner.nextLine(); // 버퍼 비우기
                    continue;
                }
            } else if (choice == 2) {
                // 무작위 숫자 생성 (0 ~ 1,000,000)
                number = (long)(Math.random() * 1000000);
                System.out.println("생성된 무작위 숫자: " + number);
            } else {
                System.out.println("유효한 선택이 아닙니다.");
                continue;
            }
            
            // 36진수 변환
            String base36 = toBase36(number);
            System.out.println("36진수 변환 결과: " + base36);
            
            // 트리 생성
            TreeNode root = createTree(base36);
            
            // 트리 시각화 출력
            System.out.println("\n트리 구조:");
            printTree(root, "", false);
            
            // 순회 결과 계산
            List<Character> preorderResult = new ArrayList<>();
            preorder(root, preorderResult);
            
            List<Character> inorderResult = new ArrayList<>();
            inorder(root, inorderResult);
            
            List<Character> postorderResult = new ArrayList<>();
            postorder(root, postorderResult);
            
            List<Character> levelOrderResult = levelOrder(root);
            
            // 순회 결과 출력
            System.out.println("\n전위 순회 (Preorder): " + preorderResult);
            System.out.println("중위 순회 (Inorder): " + inorderResult);
            System.out.println("후위 순회 (Postorder): " + postorderResult);
            System.out.println("레벨 순회 (Level Order): " + levelOrderResult);
        }
        
        scanner.close();
    }
}
